# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2023 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Fernando Badilla Veliz - Fire2a.com"
__date__ = "2023-08-30"
__copyright__ = "(C) 2023 by Fernando Badilla Veliz - Fire2a.com"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from shutil import copy
from pathlib import Path
from datetime import datetime
from multiprocessing import cpu_count
from os import sep

from osgeo import gdal

from numpy import array
from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterEnum, QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterVectorLayer, QgsProject)
from qgis.gui import QgsProcessingMultipleSelectionDialog
from qgis.PyQt.QtCore import QCoreApplication


class FireSimulatorAlgorithm(QgsProcessingAlgorithm):
    """Cell2Fire"""

    fuel_models = ["0. Scott & Burgan", "1. Kitral"]
    ignition_modes = [
        "0. Uniformly distributed random ignition point(s)",
        "1. Probability map distributed random ignition point(s)",
        "2. Single point on a (Vector)Layer",
    ]
    weather_modes = [
        "0. Single weather file scenario",
        "1. Random draw from multiple weathers in a directory",
        "2. Sequential draw from multiple weathers in a directory",
    ]
    output_options = [
        "Burn Probability",
        "Hit ROS",
        "Flame Length",
        "Crown Fire Scar",
        "Crown Fire Fuel Consumption",
        "Betweenness Centrality",
        "Downstream Protection Value",
    ]
    OUTPUTS = "OutputLayers"
    OUTPUT_FOLDER = "OutputFolder"
    FUEL_MODEL = "FuelModel"
    FUEL = "FuelRaster"
    ELEVATION = "ElevationRaster"
    PV = "PvRaster"
    CBH = "CbhRaster"
    CBD = "CbdRaster"
    CCF = "CcfRaster"
    CROWN = "EnableCrownFire"
    IGNITION_MODE = "IgnitionMode"
    NSIM = "NumberOfSimulations"
    IGNIPROBMAP = "IgnitionProbabilityMap"
    IGNIPOINT = "IgnitionPointVectorLayer"
    IGNIRADIUS = "IgnitionRadius"
    WEATHER_MODE = "WeatherMode"
    WEAFILE = "WeatherFile"
    WEADIR = "WeatherDirectory"
    FMC = "FoliarMoistureContent"
    LDFMCS = "LiveAndDeadFuelMoistureContentScenario"
    CPU_THREADS = "CpuThreads"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # LANDSCAPE
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.FUEL_MODEL,
                description=self.tr("LANDSCAPE SECTION\nSurface fuel model"),
                options=self.fuel_models,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.FUEL,
                description=self.tr("Surface fuel"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.ELEVATION,
                description=self.tr("Elevation"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.PV,
                description=self.tr("pv: Landscape Protection Value"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CBH,
                description=self.tr("\ncbh: Canopy Base Height"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CBD,
                description=self.tr("cbd: Canopy Base Density"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CCF,
                description=self.tr("ccf: Canopy Cover Fraction"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.CROWN,
                description="Enable Crown Fire behavior",
                defaultValue=False,
                optional=False,
            )
        )
        # IGNITION
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.NSIM,
                description="\nIGNITION SECTION\nNumber of simulations",
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=2,
                optional=False,
                minValue=1,
                maxValue=66642069,
            )
        )
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.IGNITION_MODE,
                description=self.tr("Generation mode"),
                options=self.ignition_modes,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.IGNIPROBMAP,
                description=self.tr("Probability map (requires generation mode B)"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                name=self.IGNIPOINT,
                description="Single point vector layer (requires generation mode C)",
                types=[QgsProcessing.TypeVectorPoint],
                defaultValue=None,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.IGNIRADIUS,
                description="Radius around single point layer (requires generation mode C)",
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=0,
                optional=True,
                minValue=0,
                maxValue=11,
            )
        )
        # WEATHER
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.WEATHER_MODE,
                description=self.tr(
                    "\nWEATHER SECTION\nsource (use the weather builder tool if missing, must match Fuel Model)"
                ),
                options=self.weather_modes,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.WEAFILE,
                description="Single weather file scenario (requires source 0)",
                behavior=QgsProcessingParameterFile.File,
                extension="csv",
                defaultValue=None,
                optional=True,
                fileFilter="",
            )
        )
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.WEADIR,
                description="From multiple weathers in a directory (requires source 1 or 2)",
                behavior=QgsProcessingParameterFile.Folder,
                extension="",
                defaultValue=None,
                optional=True,
                fileFilter="",
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.FMC,
                description="Foliar Moisture Content [40%...200%]",
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=66,
                optional=False,
                minValue=40,
                maxValue=200,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.LDFMCS,
                description=(
                    "Live & Dead Fuel Moisture Content Scenario [1=dry..4=moist] (requires Scott & Burgan Fuel Model)"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=2,
                optional=True,
                minValue=1,
                maxValue=4,
            )
        )
        # OUTPUTS
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.OUTPUTS,
                description=self.tr("\nOUTPUTS SECTION"),
                options=self.output_options,
                allowMultiple=True,
                defaultValue=0,
            )
        )
        project_path = QgsProject().instance().absolutePath()
        dirname = "firesim_" + datetime.now().strftime("%y%m%d_%H%M%S")
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                name=self.OUTPUT_FOLDER,
                description="Results directory (destructive action: cleans up if already exists)",
                defaultValue=None if project_path == "" else project_path + sep + dirname,
                optional=True,
                createByDefault=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.CPU_THREADS,
                description=(
                    "cpu threads (controls overall load to the computer by controlling number of simultaneous"
                    " simulations)"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=cpu_count() - 1,
                optional=False,
                minValue=1,
                maxValue=cpu_count(),
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        fuel_model = self.parameterAsInt(parameters, self.FUEL_MODEL, context)
        feedback.pushCommandInfo(f"fuel_model: {self.fuel_models[fuel_model]}")

        ignition_mode = self.parameterAsInt(parameters, self.IGNITION_MODE, context)
        feedback.pushCommandInfo(f"ignition_mode: {self.ignition_modes[ignition_mode]}")

        weather_mode = self.parameterAsInt(parameters, self.WEATHER_MODE, context)
        feedback.pushCommandInfo(f"weather_mode: {self.weather_modes[weather_mode]}")

        output_options = self.parameterAsEnums(parameters, self.OUTPUTS, context)
        feedback.pushCommandInfo(f"output_options: {array(self.output_options)[output_options]}")

        output_folder = Path(self.parameterAsString(parameters, self.OUTPUT_FOLDER, context))
        feedback.pushCommandInfo(f"output_folder: {str(output_folder)} {output_folder.exists()}")

        output_folder.mkdir(parents=True, exist_ok=True)
        for afile in output_folder.glob('*'):
            afile.unlink(missing_ok=True)
        # if fuel_model
        # copy('fuel_model.csv', output_folder)

        layer = self.parameterAsRasterLayer(parameters, self.FUEL, context)
        layer.bandCount()
        layer.width()
        layer.height()
            
        if not gdal.Open(layer.publicSource(), gdal.GA_ReadOnly).GetDriver().ShortName == 'AAIGrid':
            raise QgsProcessingException(self.tr("Input raster {layer.name()} must be in AAIGrid format, use gdal_translate!"))

        return {self.OUTPUTS: fuel_model}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "cell2firesimulator"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        return self.tr(self.name())
        """
        return self.tr("Cell2 Fire Simulator")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "experimental"

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return FireSimulatorAlgorithm()
        return FireSimulatorAlgorithm()

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return FireSimulatorAlgorithm()

