# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2023 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Fernando Badilla Veliz - Fire2a.com"
__date__ = "2023-08-30"
__copyright__ = "(C) 2023 by Fernando Badilla Veliz - Fire2a.com"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from datetime import datetime
from multiprocessing import cpu_count
from os import sep
from pathlib import Path
from shutil import copy

from numpy import array
from osgeo import gdal
from qgis.core import (QgsFeatureSink, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingException, QgsProcessingParameterBoolean,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterEnum, QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterVectorLayer, QgsProject,
                       QgsRasterLayer)
from qgis.gui import QgsProcessingMultipleSelectionDialog
from qgis.PyQt.QtCore import QCoreApplication


class FireSimulatorAlgorithm(QgsProcessingAlgorithm):
    """Cell2Fire"""

    fuel_models = ["0. Scott & Burgan", "1. Kitral"]
    ignition_modes = [
        "0. Uniformly distributed random ignition point(s)",
        "1. Probability map distributed random ignition point(s)",
        "2. Single point on a (Vector)Layer",
    ]
    weather_modes = [
        "0. Single weather file scenario",
        "1. Random draw from multiple weathers in a directory",
        "2. Sequential draw from multiple weathers in a directory",
    ]
    output_options = [
        "Burn Probability",
        "Hit ROS",
        "Flame Length",
        "Crown Fire Scar",
        "Crown Fire Fuel Consumption",
        "Betweenness Centrality",
        "Downstream Protection Value",
    ]
    OUTPUTS = "OutputLayers"
    OUTPUT_FOLDER = "OutputFolder"
    OUTPUT_FOLDER_IN_CURRENT_PROJECT = "CreateOutputFolderInCurrentProject"
    FUEL_MODEL = "FuelModel"
    FUEL = "FuelRaster"
    ELEVATION = "ElevationRaster"
    PV = "PvRaster"
    CBH = "CbhRaster"
    CBD = "CbdRaster"
    CCF = "CcfRaster"
    CROWN = "EnableCrownFire"
    IGNITION_MODE = "IgnitionMode"
    NSIM = "NumberOfSimulations"
    IGNIPROBMAP = "IgnitionProbabilityMap"
    IGNIPOINT = "IgnitionPointVectorLayer"
    IGNIRADIUS = "IgnitionRadius"
    WEATHER_MODE = "WeatherMode"
    WEAFILE = "WeatherFile"
    WEADIR = "WeatherDirectory"
    FMC = "FoliarMoistureContent"
    LDFMCS = "LiveAndDeadFuelMoistureContentScenario"
    SIM_THREADS = "SimulationThreads"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # LANDSCAPE
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.FUEL_MODEL,
                description=self.tr("LANDSCAPE SECTION\nSurface fuel model"),
                options=self.fuel_models,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.FUEL,
                description=self.tr("Surface fuel"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.ELEVATION,
                description=self.tr("Elevation"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.PV,
                description=self.tr("pv: Landscape Protection Value"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CBH,
                description=self.tr("\ncbh: Canopy Base Height"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CBD,
                description=self.tr("cbd: Canopy Base Density"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.CCF,
                description=self.tr("ccf: Canopy Cover Fraction"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.CROWN,
                description="Enable Crown Fire behavior",
                defaultValue=False,
                optional=False,
            )
        )
        # IGNITION
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.NSIM,
                description="\nIGNITION SECTION\nNumber of simulations",
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=2,
                optional=False,
                minValue=1,
                maxValue=66642069,
            )
        )
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.IGNITION_MODE,
                description=self.tr("Generation mode"),
                options=self.ignition_modes,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                name=self.IGNIPROBMAP,
                description=self.tr("Probability map (requires generation mode 1)"),
                defaultValue=[QgsProcessing.TypeRaster],
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                name=self.IGNIPOINT,
                description="Single point vector layer (requires generation mode 2)",
                types=[QgsProcessing.TypeVectorPoint],
                defaultValue=None,
                optional=True,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.IGNIRADIUS,
                description="Radius around single point layer (requires generation mode 2)",
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=None,
                optional=True,
                minValue=0,
                maxValue=11,
            )
        )
        # WEATHER
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.WEATHER_MODE,
                description=self.tr(
                    "\nWEATHER SECTION\nsource (use the weather builder algorithm if missing, must match Fuel Model)"
                ),
                options=self.weather_modes,
                allowMultiple=False,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.WEAFILE,
                description="Single weather file scenario (requires source 0)",
                behavior=QgsProcessingParameterFile.File,
                extension="csv",
                defaultValue=None,
                optional=True,
                fileFilter="",
            )
        )
        self.addParameter(
            QgsProcessingParameterFile(
                name=self.WEADIR,
                description="From multiple weathers in a directory (requires source 1 or 2)",
                behavior=QgsProcessingParameterFile.Folder,
                extension="",
                defaultValue=None,
                optional=True,
                fileFilter="",
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.FMC,
                description="Foliar Moisture Content [40%...200%]",
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=66,
                optional=False,
                minValue=40,
                maxValue=200,
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.LDFMCS,
                description=(
                    "Live & Dead Fuel Moisture Content Scenario [1=dry..4=moist] (requires Scott & Burgan Fuel Model)"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=2,
                optional=True,
                minValue=1,
                maxValue=4,
            )
        )
        # RUN CONFIGURATION
        self.addParameter(
            QgsProcessingParameterNumber(
                name=self.SIM_THREADS,
                description=(
                    "\nRUN CONFIGURATION\nsimulation cpu threads (controls overall load to the computer by controlling"
                    " number of simultaneous simulations [check Advanced>Algorithm Settings alternative settings])"
                ),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=cpu_count() - 1,
                optional=False,
                minValue=1,
                maxValue=cpu_count(),
            )
        )
        # OUTPUTS
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.OUTPUTS,
                description=self.tr("\nOUTPUTS SECTION\nOutput layers (TODO: separar en varios algoritmos)"),
                options=self.output_options,
                allowMultiple=True,
                defaultValue=0,
            )
        )
        self.addParameter(
            QgsProcessingParameterBoolean(
                name=self.OUTPUT_FOLDER_IN_CURRENT_PROJECT,
                description=(
                    "Override output directory to 'project home/firesim_yymmdd_HHMMSS' (project must be saved locally)"
                ),
                defaultValue=False,
                optional=False,
            )
        )
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                name=self.OUTPUT_FOLDER,
                description="Output directory (destructive action warning: empties contents if already exists)",
                defaultValue=None,
                optional=True,
                createByDefault=True,
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        args = []
        feedback.pushDebugInfo(f"parameters {parameters}")
        feedback.pushDebugInfo(f"context args: {context.asQgisProcessArguments()}")
        # GET OPTIONS
        fuel_model = self.parameterAsInt(parameters, self.FUEL_MODEL, context)
        ignition_mode = self.parameterAsInt(parameters, self.IGNITION_MODE, context)
        weather_mode = self.parameterAsInt(parameters, self.WEATHER_MODE, context)
        output_options = self.parameterAsEnums(parameters, self.OUTPUTS, context)
        feedback.pushDebugInfo(
            f"fuel_model: {self.fuel_models[fuel_model]}\n"
            f"ignition_mode: {self.ignition_modes[ignition_mode]}\n"
            f"weather_mode: {self.weather_modes[weather_mode]}\n"
            f"output_options: {array(self.output_options)[output_options]}\n"
        )
        args += [ '--sim '+ 'S' if fuel_mode == 0 else 'K' ]
        is_crown = self.parameterAsBool(parameters, self.CROWN, context)
        args += [ '--cros' if is_crown None ]
        # HANDLE OUTPUT FOLDER
        project_path = QgsProject().instance().absolutePath()
        if self.parameterAsBool(parameters, self.OUTPUT_FOLDER_IN_CURRENT_PROJECT, context) and project_path != "":
            output_folder = Path(project_path, "firesim_" + datetime.now().strftime("%y%m%d_%H%M%S"))
        else:
            output_folder = Path(self.parameterAsString(parameters, self.OUTPUT_FOLDER, context))
        output_folder.mkdir(parents=True, exist_ok=True)
        for afile in output_folder.glob("*"):
            afile.unlink(missing_ok=True)
        feedback.pushDebugInfo(
            f"output_folder: {str(output_folder)}\n"
            f"\texists: {output_folder.exists()}\n"
            f"\tis_dir: {output_folder.is_dir()}\n"
            f"\t    contents: {list(output_folder.glob('*'))}\n"
        )
        # GET LAYERS
        raster = dict(
            zip(
                ["fuels", "elevation", "pv", "cbh", "cbd", "ccf", "igniprobmap"],
                map(
                    lambda x: self.parameterAsRasterLayer(parameters, x, context),
                    [
                        self.FUEL,
                        self.ELEVATION,
                        self.PV,
                        self.CBH,
                        self.CBD,
                        self.CCF,
                        self.IGNIPROBMAP,
                        self.IGNIPOINT,
                    ],
                ),
            )
        )
        feedback.pushDebugInfo(f"rasters all: {raster}")
        for k, v in raster.items():
            if v is None:
                feedback.pushDebugInfo(f"is None: {k}:{v}")
                continue
            if (
                (k in ["fuels", "elevation", "pv"])
                or (k in ["cbh", "cbd", "ccf"] and is_crown)
                or (k == "igniprobmap" and ignition_mode == 1)
            ):
                copy(v.publicSource(), Path(output_folder, f"{k}.asc"))
                feedback.pushDebugInfo(f"copy: {k}:{v}")
            else:
                feedback.pushDebugInfo(f"NO copy: {k}:{v}")

        # WEATHER
        # TODO check weathers
        if weather_mode == 0:
            wfilein = self.parameterAsFile(parameters, self.WEAFILE, context)
            wfileout = Path(output_folder, "Weather.csv")
            copy(wfilein, wfileout)
            feedback.pushDebugInfo(f"copy: {wfilein} to {wfileout}")
        else:
            wdirin = Path(self.parameterAsFile(parameters, self.WEADIR, context))
            wdirout = Path(output_folder, "Weathers")
            wdirout.mkdir(parents=True, exist_ok=True)
            for wfile in wdirin.glob("Weather[0-9]*.csv"):
                copy(wfile, wdirout)
            feedback.pushDebugInfo(f"copy: {wdirin} to {wdirout}")

        return {self.OUTPUT_FOLDER: output_folder}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "cell2firesimulator"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        return self.tr(self.name())
        """
        return self.tr("Cell2 Fire Simulator")
        '''
        def group(self):
            """
            Returns the name of the group this algorithm belongs to. This string
            should be localised.
            """
            return self.tr(self.groupId())

        def groupId(self):
            """
            Returns the unique ID of the group this algorithm belongs to. This
            string should be fixed for the algorithm, and must not be localised.
            The group id should be unique within each provider. Group id should
            contain lowercase alphanumeric characters only and no spaces or other
            formatting characters.
            """
            return "experimental"
        '''

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return FireSimulatorAlgorithm()


def get_gdal_driver_shortname(raster: QgsRasterLayer):
    if hasattr(raster, "publicSource"):
        raster_filename = raster.publicSource()
    else:
        raise FileNotFoundError("raster {raster.name()} does not have a public source!")
    filepath = Path(raster_filename)
    if not filepath.is_file() or filepath.stat().st_size == 0:
        raise FileNotFoundError("raster {raster.name()} file does not exist os is empty!")
    return (gdal.Open(raster_filename, gdal.GA_ReadOnly).GetDriver().ShortName,)  # AAIGrid


def get_qgs_raster_properties(raster: QgsRasterLayer, feedback):
    output = {
        "bandCount": raster.bandCount(),  # 1
        "width": raster.width(),
        "height": raster.height(),
        "crs": raster.crs().authid(),
        "extent": raster.extent(),
        "rasterUnitsPerPixelX": raster.rasterUnitsPerPixelX(),
        "rasterUnitsPerPixelY": raster.rasterUnitsPerPixelY(),
    }
    feedback.pushDebugInfo(f"output: {output}")
    return output


def ensure_same_properties(base: dict, incumbent: dict):
    if base != incumbent:
        raise QgsProcessingException(self.tr("Input raster {v.name()} must have the same properties as fuels!"))
    return True


def check_rasters_congruence(rasters, feedback):
    base = get_qgs_raster_properties(raster["fuels"], feedback)
    for k, v in raster.items():
        feedback.pushDebugInfo(f"k-{k}: v-{v}")
        if v is None or k == "fuels":
            pass
        incumbent = get_qgs_raster_properties(v, feedback)
        if k in ["cbh", "cbd", "ccf"] and is_crown:
            ensure_same_properties(base, incumbent)
            continue
        if k in ["elevation", "pv"]:
            ensure_same_properties(base, incumbent)
            continue
        if k == "igniprobmap" and ignition_mode == 1:
            ensure_same_properties(base, incumbent)
            continue
    """
    if ignipoint := self.parameterAsVectorLayer(parameters, self.IGNIPOINT, context):
        layer["ignipoint"] := ignipoint
        if layer['ignipoint'].crs().authid() != layer['fuels'].crs().authid():
            raise QgsProcessingException(
                self.tr("Input raster {layer.name()} must have the same CRS as fuel!")
            )
    """
